
apply plugin: 'com.android.library'
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.aspectj:aspectjtools:1.8.1'
    }
}
android {
    compileSdkVersion rootProject.extensions.getByName("ext").properties.get("compileSdkVersion")
    buildToolsVersion rootProject.extensions.getByName("ext").properties.get("buildToolsVersion")

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['resources']
            aidl.srcDirs = ['aidl']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['jniLibs']
        }
        instrumentTest.setRoot('tests')
    }

    defaultConfig {
        publishNonDefault true
        minSdkVersion rootProject.extensions.getByName("ext").properties.get("minSdkVersion")
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"

        //uncomment this to enable native debug
//        externalNativeBuild {
//            ndkBuild {
//                abiFilters "armeabi" //"armeabi"
//            }
//        }
    }

//    packagingOptions {
//        doNotStrip "*/armeabi/*.so" // 配置库文件不去除符号信息
//    }

    //uncomment this to enable native debug
//    externalNativeBuild {
//        ndkBuild {
//            path "src/jni/Android.mk"
//        }
//    }

    buildTypes {
        debug {
            //uncomment this to enable native debug
//            jniDebuggable true
//            externalNativeBuild {
//                cmake {
//                    arguments "-DWITH_SYMBOL_TABLE=true -DWITH_CRASH_LOG=true"
//                }
//                ndkBuild {
//                    arguments "WITH_SYMBOL_TABLE=true WITH_CRASH_LOG=true"
//                }
//            }
            buildConfigField "boolean", "LOG", "true"
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "boolean", "LOG", "true"
        }
    }
	
	lintOptions {
	 checkReleaseBuilds false
        abortOnError false
        lintConfig file("../backup/lint_report_mail/sogou_lint.xml")
        xmlOutput file("build/outputs/SogouInput_Lint_Report.xml")
        htmlOutput file("build/outputs/SogouInput_Lint_Report.html")
    }
}

dependencies {
    compile 'org.aspectj:aspectjtools:1.8.1'
}

import org.aspectj.bridge.*
import org.aspectj.tools.ajc.*

android.libraryVariants.all { variant ->
    JavaCompile javaCompile = variant.javaCompile
    javaCompile.doLast {
        //下面的1.8是指我们兼容的jdk的版本
        String[] args = ["-showWeaveInfo",
                         "-1.8",
                         "-inpath", javaCompile.destinationDir.toString(),
                         "-aspectpath", javaCompile.classpath.asPath,
                         "-d", javaCompile.destinationDir.toString(),
                         "-classpath", javaCompile.classpath.asPath,
                         "-bootclasspath", android.bootClasspath.join(File.pathSeparator)]

        MessageHandler handler = new MessageHandler(true);
        new Main().run(args, handler)

        def log = project.logger
        for (IMessage message : handler.getMessages(null, true)) {
            switch (message.getKind()) {
                case IMessage.ABORT:
                case IMessage.ERROR:
                case IMessage.FAIL:
                    log.error message.message, message.thrown
                    break;
                case IMessage.WARNING:
                case IMessage.INFO:
                    log.info message.message, message.thrown
                    break;
                case IMessage.DEBUG:
                    log.debug message.message, message.thrown
                    break;
            }
        }
    }
}
