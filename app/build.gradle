import com.android.build.gradle.LibraryPlugin
import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main


apply plugin: 'com.android.application'
apply plugin: 'realm-android'
//apply plugin: com.inject.PluginImpl
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.aspectj:aspectjtools:1.8.1'
    }
}

android {
    compileSdkVersion rootProject.extensions.getByName("ext").properties.get("compileSdkVersion")
    buildToolsVersion rootProject.extensions.getByName("ext").properties.get("buildToolsVersion")

    defaultConfig {
        applicationId "com.dw"
        minSdkVersion rootProject.extensions.getByName("ext").properties.get("minSdkVersion")
        targetSdkVersion rootProject.extensions.getByName("ext").properties.get("targetSdkVersion")
        versionCode 1
        versionName "hi." + getDateVersionName()
        manifestPlaceholders = [CUR_DATE: getDateVersionName()]
        multiDexEnabled true
        ndk {
//            abiFilters "arm64-v8a" // 保留这种架构的CPU
            abiFilters "armeabi-v7a" // 保留这种架构的CPU
        }
        externalNativeBuild {
            cmake {
//                abiFilters "arm64-v8a"
                abiFilters "armeabi-v7a"
                arguments "-DANDROID_TOOLCHAIN=clang", "-DANDROID_PLATFORM=android-21", "-DANDROID_STL=c++_static" ,"-DWITH_CRASH_LOG=true" , "-DNOENCRYPT=true"// why rtti causes compiling error?
            }
        }
    }
    externalNativeBuild {
        cmake {
            path "../jni/CMakeLists.txt"
        }
    }
    dexOptions {
        incremental false
        javaMaxHeapSize "2048M"
    }
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['jniLibs']
        }


        androidTest.setRoot('tests')
    }
    signingConfigs {
        release {
            storeFile file('my.keystore')
            storePassword 'android'
            keyAlias 'android'
            keyPassword 'android'
        }
    }

    buildTypes {
        debug {
            buildConfigField("String", "ABC", "\"aa\"")
            resValue("string", "sogou_ime_name1", "AA")
            applicationIdSuffix = ".debug"
            versionNameSuffix "-dw"
            signingConfig signingConfigs.release
            jniDebuggable true
            buildConfigField "boolean", "LOG", "true"
//            minifyEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            buildConfigField "boolean", "LOG", "true"
        }
        oppo.initWith(buildTypes.release)
        oppo {
            applicationIdSuffix = "oem"
            versionNameSuffix "-oppo"
        }
    }


    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    applicationVariants.all { variant ->
        if (variant.buildType.name == "release") {
            def dexTask = project.tasks.findByName("transformClassesWithDexForRelease")
            def preDexTask = project.tasks.findByName("transformClassesWithPreDexForRelease")
            if (preDexTask) {
                project.logger.error "======preDexTask======"
                preDexTask.inputs.files.files.each { file ->
                    project.logger.error "inputs =$file.absolutePath"
                }

                preDexTask.outputs.files.files.each { file ->
                    project.logger.error "outputs =$file.absolutePath"
                }
            }
            if (dexTask) {
                project.logger.error "======dexTask======"
                dexTask.inputs.files.files.each { file ->
                    project.logger.error "inputs =$file.absolutePath"
                }

                dexTask.outputs.files.files.each { file ->
                    project.logger.error "outputs =$file.absolutePath"
                }
            }
        }


    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    dataBinding {
        enabled = true
    }
}


def getDateVersionName() {
    String today = new Date().format("yyMMdd")
    return today
}

/*task askForPasswords << {
    // Must create String because System.readPassword() returns char[]
    // (and assigning that below fails silently)
    def storePw = new String(System.console().readPassword("Keystore password: "))
    def keyPw  = new String(System.console().readPassword("Key password: "))

    android.signingConfigs.release.storePassword = storePw
    android.signingConfigs.release.keyPassword = keyPw
}

tasks.whenTaskAdded { theTask ->
    if (theTask.name.equals("packageRelease")) {
        theTask.dependsOn "askForPasswords"
    }
}*/

dependencies {
    compile files('libs/dex2jar.jar')
    compile files('libs/dictutils.jar')
    compile files('libs/dom4j-1.6.1.jar')
    compile files('libs/sqlcipher.jar')
    compile files('libs/jclasslib.jar')
    compile project(':hack')
    //    compile project(':realm')
    compile 'com.squareup.okhttp3:okhttp:3.8.1'
    compile 'com.squareup.okio:okio:1.13.0'
    /*compile 'com.sky.slog:slog:0.4.0'*/
    compile 'com.android.support:recyclerview-v7:23.2.1'
    //    compile 'com.android.tools.build:gradle:1.5.0'
    compile 'org.javassist:javassist:3.20.0-GA'
    compile 'org.greenrobot:eventbus:3.0.0'
    //    compile 'net.zetetic:android-database-sqlcipher:3.4.0@aar'
    compile project(':realmdb')
    compile 'com.android.support:appcompat-v7:23.4.0'
    compile 'com.android.support.constraint:constraint-layout:1.1.2'
    compile 'com.github.bumptech.glide:glide:4.0.0'
    annotationProcessor "com.github.bumptech.glide:compiler:4.0.0"
//    compile 'com.github.bumptech.glide:glide:4.8.0'
//    annotationProcessor 'com.github.bumptech.glide:compiler:4.8.0'
    compile 'org.aspectj:aspectjtools:1.8.1'
    compile project(':native_crash_collector')
}
ext {
    local = 'Hello from build.gradle'
}
task printProperties << {
    println local        // Local extra property
    println propertiesFile        // Property from file
    if (project.hasProperty('cmd')) {
        println cmd        // Command line property
    }
    println System.properties['cmd']  //gradle printProperties -Dcmd='Hello from System.properties'
    Enumeration e = System.properties.propertyNames();
    while (e.hasMoreElements()) {
        String el = e.nextElement()
        println el + "=" + System.properties[el]
    }

}


final def log = project.logger
final def variants = project.android.applicationVariants

variants.all { variant ->
    /*if (!variant.buildType.isDebuggable()) {
        log.debug("Skipping non-debuggable build type '${variant.buildType.name}'.")
        return;
    }*/

    JavaCompile javaCompile = variant.javaCompile
    javaCompile.doLast {
        String[] args = ["-showWeaveInfo",
                         "-1.8",
                         "-inpath", javaCompile.destinationDir.toString(),
                         "-aspectpath", javaCompile.classpath.asPath,
                         "-d", javaCompile.destinationDir.toString(),
                         "-classpath", javaCompile.classpath.asPath,
                         "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]
        log.debug "ajc args: " + Arrays.toString(args)

        MessageHandler handler = new MessageHandler(true);
        new Main().run(args, handler);
        for (IMessage message : handler.getMessages(null, true)) {
            switch (message.getKind()) {
                case IMessage.ABORT:
                case IMessage.ERROR:
                case IMessage.FAIL:
                    log.error message.message, message.thrown
                    break;
                case IMessage.WARNING:
                    log.warn message.message, message.thrown
                    break;
                case IMessage.INFO:
                    log.info message.message, message.thrown
                    break;
                case IMessage.DEBUG:
                    log.debug message.message, message.thrown
                    break;
            }
        }
    }
}